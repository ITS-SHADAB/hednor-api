// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user model
model User {
  id              Int               @id @default(autoincrement())
  userId String @unique
  userName        String           
  email           String            @unique
  password        String
  phoneNo         String
  role  Role @default(CUSTOMER)
  addresses       Address[]
  cart Cart? 
  orders          Order[]
  rejectedProduct RejectedProduct?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt


  Seller Seller[]
}
enum Role {
  CUSTOMER
  ADMIN
  SELLER
}

//Address model link to User
model Address {
  id             Int       @id @default(autoincrement())
  name String
  locality         String
  address         String
  city           String
  state          String
  postalCode     String
  phoneNo String
  alternetPhone String
  landMark    String
  country        String @default("India")
  isBilling      Boolean   @default(false)
  BillingAddress     BillingAddress[]
  userId         Int
  user           User      @relation(fields: [userId], references: [id])

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

//Billing Address model link to Address
model BillingAddress {
  id             Int       @id @default(autoincrement())
  name String
  locality         String
  address         String
  city           String
  state          String
  postalCode     String
  phoneNo String
  alternetPhone String
  landMark    String
  country        String @default("India")
  AddressId         Int
  Address           Address      @relation(fields: [AddressId], references: [id])
  isBilling      Boolean   @default(true)   // Ensuring it is the billing address
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Product model link to Cart
model Product {
  id                    Int       @id @default(autoincrement())
  productId String @unique
  name                  String
  description           String
  price                 Float
  salePrice             Float?
  sku                   String
  stock                 Int

  brand                 String
  manufacturer          String?
  material              String?
  warranty              String?
  expirationDate        DateTime?
  barcode               String?
  rating                Float?
  ratingCount           Int?
  shippingWeight        Float?
  availabilityStatus    String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  images               Image[]
  tags                  String[]
  dimensions            String?
  featured              Boolean
  productType           String?
  isDigital             Boolean
  shippingRegion        String?
  returnPolicy          String?
  bundle                String?
  category String
  // link to seller
  sellerId String
  seller Seller @relation(fields: [sellerId],references: [sellerId])

  cartId Int?
  cart Cart? @relation(fields: [cartId],references: [id])
  rejectedProducts    RejectedProduct[] @relation("RejectedProductToProduct")
  Specification Specification[]
  SellerOrder SellerOrder[]


}
model ProductCategory{
  id Int @id @default(autoincrement())
  name String
  image String
  description String?
  subCategory ProductSubCategory[]


}

model ProductSubCategory{
  id Int @id @default(autoincrement())
  name String
  productCategoryId Int
  productCategory ProductCategory @relation(fields: [productCategoryId],references: [id])
}
//Product Image
model Image {
  id        Int      @id @default(autoincrement())
  url       String   // Image URL or file path
  color     String   // Color associated with the image (e.g., 'red', 'green')
  images String[]
  price Int
  productId Int      // Foreign key to Product
  product   Product  @relation(fields: [productId], references: [id])
}
//Specification model link to Product
model Specification{

  id Int @id @default(autoincrement())
  highlightsName String
  higlights String[]
  productId Int
  product Product @relation(fields: [productId],references: [id])
  values  SpecificationValue[]

}
// specification value specification based price
model SpecificationValue{
  id Int @id @default(autoincrement())
  specName String
  price Float
  specificationId  Int
  specification Specification @relation(fields: [specificationId], references: [id])


}

// cart model link to order
model Cart{
id Int @id @default(autoincrement())
cartId String @unique
product Product[]
quantity String
userId Int @unique
user User @relation(fields: [userId],references: [id])
order Order?
}


//cart Coupan
model Coupan{
  id Int @id @default(autoincrement())
  coupanId String @unique
  coupan_code String
  status String @default("Active")
  discountValue Float
  startDate   DateTime? 
  endDate DateTime?
  createdAt    DateTime   @default(now()) 
  updatedAt        DateTime   @updatedAt  
}

model Payment{
id Int @id @default(autoincrement())
paymentId String @unique
method_name String
status PaymentStatus @default(Pending)
transactionId Int
amount Float
createdAt    DateTime   @default(now()) 
updatedAt        DateTime   @updatedAt  
}

// enum for Payment
enum PaymentStatus{
  Pending
  Completed
  Failed
  Refunded
  Cancelled
  Processing
} 
// enum for orderStatus
enum orderStatus{
  Pending
  Success
  Failed
  Rejected
  Processing
}
model Order {
  id             Int       @id @default(autoincrement())
  orderId String @unique
  totalAmount    Float
  CoupanId String[]
  status         String    @default("Pending")
  cartId Int @unique
  cart Cart @relation(fields: [cartId],references: [id])
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt        DateTime   @updatedAt  


}

model RejectedProduct{
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId],references: [id])

  Product Product[] @relation("RejectedProductToProduct")
}




// SELLER
// Seller model for sellers
model Seller {
  id                  Int               @id @default(autoincrement())
  sellerId String @unique
  businessName        String
  businessEmail       String            @unique
  sellerPanNumber     String            @unique
  sellerGSTNumber     String            @unique
  sellerAccountNumber Int               @unique
  sellerIFSCCode      String            @unique
  sellerBankName      String            
  userId              Int                
  user                User              @relation(fields: [userId], references: [id]) 
  businesslogo        String?           
  status              SellerStatus      @default(INACTIVE)  
  commissionRate      Float?            
  registrationDate    DateTime         @default(now())  
  businessDescription String?           
  verified            Boolean           @default(false) 
  totalSales          Int?              
  pickupRegions       String[]          
  sellerRating  Float
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  products            Product[]         
      


  SellerOrder SellerOrder[]
}

model SellerOrder{
  id Int @id @default(autoincrement())

  sellerId String
  seller Seller @relation(fields: [sellerId],references: [sellerId])
  productId String
  product Product @relation(fields: [productId],references: [productId])
  CoupanId String[]
  
 createdAt      DateTime  @default(now())
  updatedAt        DateTime   @updatedAt  
}

model Warehouse{
  id Int @id @default(autoincrement())
 name String
  locality         String
  address         String
  city           String
  state          String
  postalCode     String
  phoneNo String
  alternetPhone String
  landMark    String
  createdAt      DateTime  @default(now())
  updatedAt        DateTime   @updatedAt  
  
}
// seller Docs
 
 model SellerDocuments{
  id Int @id @default(autoincrement())
  panURL String
  gstUrl String
  passbook String

 }

//  SellerProduct

//Enum for seller status
enum SellerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

